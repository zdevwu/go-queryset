// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"

	forex "github.com/zdevwu/go-queryset/internal/queryset/generator/test/pkgimport/forex/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set ExampleQuerySet

// ExampleQuerySet is an queryset type for Example
type ExampleQuerySet struct {
	db *gorm.DB
}

// NewExampleQuerySet constructs new ExampleQuerySet
func NewExampleQuerySet(db *gorm.DB) ExampleQuerySet {
	return ExampleQuerySet{
		db: db.Model(&Example{}),
	}
}

func (qs ExampleQuerySet) w(db *gorm.DB) ExampleQuerySet {
	return NewExampleQuerySet(db)
}

func (qs ExampleQuerySet) Select(fields ...ExampleDBSchemaField) ExampleQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(names))
}

// Create is an autogenerated method
// nolint: dupl
func (o *Example) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Example) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) All(ret *[]Example) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Count() (int64, error) {
	var count int64
	err := qs.db.Count(&count).Error
	return count, err
}

// Currency1Eq is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency1Eq(currency1 forex.Currency1) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Eq{Column: "currency1", Value: currency1}))
}

// Currency1Gt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency1Gt(currency1 forex.Currency1) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Gt{Column: "currency1", Value: currency1}))
}

// Currency1Gte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency1Gte(currency1 forex.Currency1) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Gte{Column: "currency1", Value: currency1}))
}

// Currency1In is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency1In(currency1 ...forex.Currency1) ExampleQuerySet {
	if len(currency1) == 0 {
		qs.db.AddError(errors.New("must at least pass one currency1 in Currency1In"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(currency1))
	for i, s := range currency1 {
		values[i] = s
	}
	return qs.w(qs.db.Where(clause.IN{Column: "currency1", Values: values}))
}

// Currency1Lt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency1Lt(currency1 forex.Currency1) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Lt{Column: "currency1", Value: currency1}))
}

// Currency1Lte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency1Lte(currency1 forex.Currency1) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Lte{Column: "currency1", Value: currency1}))
}

// Currency1Ne is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency1Ne(currency1 forex.Currency1) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Neq{Column: "currency1", Value: currency1}))
}

// Currency1NotIn is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency1NotIn(currency1 ...forex.Currency1) ExampleQuerySet {
	if len(currency1) == 0 {
		qs.db.AddError(errors.New("must at least pass one currency1 in Currency1NotIn"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(currency1))
	for i, s := range currency1 {
		values[i] = s
	}
	return qs.w(qs.db.Where(clause.Not(clause.IN{Column: "currency1", Values: values})))
}

// Currency2Eq is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency2Eq(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Eq{Column: "currency2", Value: currency2}))
}

// Currency2Gt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency2Gt(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Gt{Column: "currency2", Value: currency2}))
}

// Currency2Gte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency2Gte(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Gte{Column: "currency2", Value: currency2}))
}

// Currency2In is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency2In(currency2 ...forex.Currency2) ExampleQuerySet {
	if len(currency2) == 0 {
		qs.db.AddError(errors.New("must at least pass one currency2 in Currency2In"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(currency2))
	for i, s := range currency2 {
		values[i] = s
	}
	return qs.w(qs.db.Where(clause.IN{Column: "currency2", Values: values}))
}

// Currency2Like is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency2Like(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Like{Column: "currency2", Value: currency2}))
}

// Currency2Lt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency2Lt(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Lt{Column: "currency2", Value: currency2}))
}

// Currency2Lte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency2Lte(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Lte{Column: "currency2", Value: currency2}))
}

// Currency2Ne is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency2Ne(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Neq{Column: "currency2", Value: currency2}))
}

// Currency2NotIn is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency2NotIn(currency2 ...forex.Currency2) ExampleQuerySet {
	if len(currency2) == 0 {
		qs.db.AddError(errors.New("must at least pass one currency2 in Currency2NotIn"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(currency2))
	for i, s := range currency2 {
		values[i] = s
	}
	return qs.w(qs.db.Where(clause.Not(clause.IN{Column: "currency2", Values: values})))
}

// Currency2NotLike is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency2NotLike(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Not(clause.Like{Column: "currency2", Value: currency2})))
}

// Currency3Eq is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency3Eq(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Eq{Column: "currency3", Value: currency3}))
}

// Currency3Gt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency3Gt(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Gt{Column: "currency3", Value: currency3}))
}

// Currency3Gte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency3Gte(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Gte{Column: "currency3", Value: currency3}))
}

// Currency3In is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency3In(currency3 ...forex.Currency3) ExampleQuerySet {
	if len(currency3) == 0 {
		qs.db.AddError(errors.New("must at least pass one currency3 in Currency3In"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(currency3))
	for i, s := range currency3 {
		values[i] = s
	}
	return qs.w(qs.db.Where(clause.IN{Column: "currency3", Values: values}))
}

// Currency3Like is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency3Like(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Like{Column: "currency3", Value: currency3}))
}

// Currency3Lt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency3Lt(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Lt{Column: "currency3", Value: currency3}))
}

// Currency3Lte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency3Lte(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Lte{Column: "currency3", Value: currency3}))
}

// Currency3Ne is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency3Ne(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Neq{Column: "currency3", Value: currency3}))
}

// Currency3NotIn is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency3NotIn(currency3 ...forex.Currency3) ExampleQuerySet {
	if len(currency3) == 0 {
		qs.db.AddError(errors.New("must at least pass one currency3 in Currency3NotIn"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(currency3))
	for i, s := range currency3 {
		values[i] = s
	}
	return qs.w(qs.db.Where(clause.Not(clause.IN{Column: "currency3", Values: values})))
}

// Currency3NotLike is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Currency3NotLike(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Not(clause.Like{Column: "currency3", Value: currency3})))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Delete() error {
	return qs.db.Delete(&Example{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(&Example{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(&Example{})
	return db.RowsAffected, db.Error
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) GetUpdater() ExampleUpdater {
	return NewExampleUpdater(qs.db)
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Limit(limit int) ExampleQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) Offset(offset int) ExampleQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ExampleQuerySet) One(ret *Example) error {
	return qs.db.First(ret).Error
}

// OrCurrency1Eq is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency1Eq(currency1 forex.Currency1) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Eq{Column: "currency1", Value: currency1}))
}

// OrCurrency1Gt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency1Gt(currency1 forex.Currency1) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Gt{Column: "currency1", Value: currency1}))
}

// OrCurrency1Gte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency1Gte(currency1 forex.Currency1) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Gte{Column: "currency1", Value: currency1}))
}

// OrCurrency1In is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency1In(currency1 ...forex.Currency1) ExampleQuerySet {
	if len(currency1) == 0 {
		qs.db.AddError(errors.New("must at least pass one currency1 in OrCurrency1In"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(currency1))
	for i, s := range currency1 {
		values[i] = s
	}
	return qs.w(qs.db.Or(clause.IN{Column: "currency1", Values: values}))
}

// OrCurrency1Lt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency1Lt(currency1 forex.Currency1) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Lt{Column: "currency1", Value: currency1}))
}

// OrCurrency1Lte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency1Lte(currency1 forex.Currency1) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Lte{Column: "currency1", Value: currency1}))
}

// OrCurrency1Ne is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency1Ne(currency1 forex.Currency1) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Neq{Column: "currency1", Value: currency1}))
}

// OrCurrency1NotIn is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency1NotIn(currency1 ...forex.Currency1) ExampleQuerySet {
	if len(currency1) == 0 {
		qs.db.AddError(errors.New("must at least pass one currency1 in OrCurrency1NotIn"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(currency1))
	for i, s := range currency1 {
		values[i] = s
	}
	return qs.w(qs.db.Or(clause.Not(clause.IN{Column: "currency1", Values: values})))
}

// OrCurrency2Eq is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency2Eq(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Eq{Column: "currency2", Value: currency2}))
}

// OrCurrency2Gt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency2Gt(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Gt{Column: "currency2", Value: currency2}))
}

// OrCurrency2Gte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency2Gte(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Gte{Column: "currency2", Value: currency2}))
}

// OrCurrency2In is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency2In(currency2 ...forex.Currency2) ExampleQuerySet {
	if len(currency2) == 0 {
		qs.db.AddError(errors.New("must at least pass one currency2 in OrCurrency2In"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(currency2))
	for i, s := range currency2 {
		values[i] = s
	}
	return qs.w(qs.db.Or(clause.IN{Column: "currency2", Values: values}))
}

// OrCurrency2Like is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency2Like(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Like{Column: "currency2", Value: currency2}))
}

// OrCurrency2Lt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency2Lt(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Lt{Column: "currency2", Value: currency2}))
}

// OrCurrency2Lte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency2Lte(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Lte{Column: "currency2", Value: currency2}))
}

// OrCurrency2Ne is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency2Ne(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Neq{Column: "currency2", Value: currency2}))
}

// OrCurrency2NotIn is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency2NotIn(currency2 ...forex.Currency2) ExampleQuerySet {
	if len(currency2) == 0 {
		qs.db.AddError(errors.New("must at least pass one currency2 in OrCurrency2NotIn"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(currency2))
	for i, s := range currency2 {
		values[i] = s
	}
	return qs.w(qs.db.Or(clause.Not(clause.IN{Column: "currency2", Values: values})))
}

// OrCurrency2NotLike is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency2NotLike(currency2 forex.Currency2) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Not(clause.Like{Column: "currency2", Value: currency2})))
}

// OrCurrency3Eq is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency3Eq(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Eq{Column: "currency3", Value: currency3}))
}

// OrCurrency3Gt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency3Gt(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Gt{Column: "currency3", Value: currency3}))
}

// OrCurrency3Gte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency3Gte(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Gte{Column: "currency3", Value: currency3}))
}

// OrCurrency3In is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency3In(currency3 ...forex.Currency3) ExampleQuerySet {
	if len(currency3) == 0 {
		qs.db.AddError(errors.New("must at least pass one currency3 in OrCurrency3In"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(currency3))
	for i, s := range currency3 {
		values[i] = s
	}
	return qs.w(qs.db.Or(clause.IN{Column: "currency3", Values: values}))
}

// OrCurrency3Like is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency3Like(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Like{Column: "currency3", Value: currency3}))
}

// OrCurrency3Lt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency3Lt(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Lt{Column: "currency3", Value: currency3}))
}

// OrCurrency3Lte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency3Lte(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Lte{Column: "currency3", Value: currency3}))
}

// OrCurrency3Ne is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency3Ne(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Neq{Column: "currency3", Value: currency3}))
}

// OrCurrency3NotIn is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency3NotIn(currency3 ...forex.Currency3) ExampleQuerySet {
	if len(currency3) == 0 {
		qs.db.AddError(errors.New("must at least pass one currency3 in OrCurrency3NotIn"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(currency3))
	for i, s := range currency3 {
		values[i] = s
	}
	return qs.w(qs.db.Or(clause.Not(clause.IN{Column: "currency3", Values: values})))
}

// OrCurrency3NotLike is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrCurrency3NotLike(currency3 forex.Currency3) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Not(clause.Like{Column: "currency3", Value: currency3})))
}

// OrPriceIDEq is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrPriceIDEq(priceID int64) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Eq{Column: "price_id", Value: priceID}))
}

// OrPriceIDGt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrPriceIDGt(priceID int64) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Gt{Column: "price_id", Value: priceID}))
}

// OrPriceIDGte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrPriceIDGte(priceID int64) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Gte{Column: "price_id", Value: priceID}))
}

// OrPriceIDIn is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrPriceIDIn(priceID ...int64) ExampleQuerySet {
	if len(priceID) == 0 {
		qs.db.AddError(errors.New("must at least pass one priceID in OrPriceIDIn"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(priceID))
	for i, s := range priceID {
		values[i] = s
	}
	return qs.w(qs.db.Or(clause.IN{Column: "price_id", Values: values}))
}

// OrPriceIDLt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrPriceIDLt(priceID int64) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Lt{Column: "price_id", Value: priceID}))
}

// OrPriceIDLte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrPriceIDLte(priceID int64) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Lte{Column: "price_id", Value: priceID}))
}

// OrPriceIDNe is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrPriceIDNe(priceID int64) ExampleQuerySet {
	return qs.w(qs.db.Or(clause.Neq{Column: "price_id", Value: priceID}))
}

// OrPriceIDNotIn is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrPriceIDNotIn(priceID ...int64) ExampleQuerySet {
	if len(priceID) == 0 {
		qs.db.AddError(errors.New("must at least pass one priceID in OrPriceIDNotIn"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(priceID))
	for i, s := range priceID {
		values[i] = s
	}
	return qs.w(qs.db.Or(clause.Not(clause.IN{Column: "price_id", Values: values})))
}

// OrderAscByCurrency1 is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrderAscByCurrency1() ExampleQuerySet {
	return qs.w(qs.db.Order("currency1 ASC"))
}

// OrderAscByCurrency2 is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrderAscByCurrency2() ExampleQuerySet {
	return qs.w(qs.db.Order("currency2 ASC"))
}

// OrderAscByCurrency3 is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrderAscByCurrency3() ExampleQuerySet {
	return qs.w(qs.db.Order("currency3 ASC"))
}

// OrderAscByPriceID is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrderAscByPriceID() ExampleQuerySet {
	return qs.w(qs.db.Order("price_id ASC"))
}

// OrderDescByCurrency1 is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrderDescByCurrency1() ExampleQuerySet {
	return qs.w(qs.db.Order("currency1 DESC"))
}

// OrderDescByCurrency2 is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrderDescByCurrency2() ExampleQuerySet {
	return qs.w(qs.db.Order("currency2 DESC"))
}

// OrderDescByCurrency3 is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrderDescByCurrency3() ExampleQuerySet {
	return qs.w(qs.db.Order("currency3 DESC"))
}

// OrderDescByPriceID is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) OrderDescByPriceID() ExampleQuerySet {
	return qs.w(qs.db.Order("price_id DESC"))
}

// PriceIDEq is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) PriceIDEq(priceID int64) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Eq{Column: "price_id", Value: priceID}))
}

// PriceIDGt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) PriceIDGt(priceID int64) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Gt{Column: "price_id", Value: priceID}))
}

// PriceIDGte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) PriceIDGte(priceID int64) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Gte{Column: "price_id", Value: priceID}))
}

// PriceIDIn is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) PriceIDIn(priceID ...int64) ExampleQuerySet {
	if len(priceID) == 0 {
		qs.db.AddError(errors.New("must at least pass one priceID in PriceIDIn"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(priceID))
	for i, s := range priceID {
		values[i] = s
	}
	return qs.w(qs.db.Where(clause.IN{Column: "price_id", Values: values}))
}

// PriceIDLt is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) PriceIDLt(priceID int64) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Lt{Column: "price_id", Value: priceID}))
}

// PriceIDLte is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) PriceIDLte(priceID int64) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Lte{Column: "price_id", Value: priceID}))
}

// PriceIDNe is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) PriceIDNe(priceID int64) ExampleQuerySet {
	return qs.w(qs.db.Where(clause.Neq{Column: "price_id", Value: priceID}))
}

// PriceIDNotIn is an autogenerated method
// nolint: dupl
func (qs ExampleQuerySet) PriceIDNotIn(priceID ...int64) ExampleQuerySet {
	if len(priceID) == 0 {
		qs.db.AddError(errors.New("must at least pass one priceID in PriceIDNotIn"))
		return qs.w(qs.db)
	}
	values := make([]interface{}, len(priceID))
	for i, s := range priceID {
		values[i] = s
	}
	return qs.w(qs.db.Where(clause.Not(clause.IN{Column: "price_id", Values: values})))
}

// SetCurrency1 is an autogenerated method
// nolint: dupl
func (u ExampleUpdater) SetCurrency1(currency1 forex.Currency1) ExampleUpdater {
	u.fields[string(ExampleDBSchema.Currency1)] = currency1
	return u
}

// SetCurrency2 is an autogenerated method
// nolint: dupl
func (u ExampleUpdater) SetCurrency2(currency2 forex.Currency2) ExampleUpdater {
	u.fields[string(ExampleDBSchema.Currency2)] = currency2
	return u
}

// SetCurrency3 is an autogenerated method
// nolint: dupl
func (u ExampleUpdater) SetCurrency3(currency3 forex.Currency3) ExampleUpdater {
	u.fields[string(ExampleDBSchema.Currency3)] = currency3
	return u
}

// SetPriceID is an autogenerated method
// nolint: dupl
func (u ExampleUpdater) SetPriceID(priceID int64) ExampleUpdater {
	u.fields[string(ExampleDBSchema.PriceID)] = priceID
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u ExampleUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ExampleUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set ExampleQuerySet

// ===== BEGIN of Example modifiers

// ExampleDBSchemaField describes database schema field. It requires for method 'Update'
type ExampleDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f ExampleDBSchemaField) String() string {
	return string(f)
}

// ExampleDBSchema stores db field names of Example
var ExampleDBSchema = struct {
	PriceID   ExampleDBSchemaField
	Currency1 ExampleDBSchemaField
	Currency2 ExampleDBSchemaField
	Currency3 ExampleDBSchemaField
}{

	PriceID:   ExampleDBSchemaField("price_id"),
	Currency1: ExampleDBSchemaField("currency1"),
	Currency2: ExampleDBSchemaField("currency2"),
	Currency3: ExampleDBSchemaField("currency3"),
}

var ExampleDBSchemaAllFields = []ExampleDBSchemaField{

	ExampleDBSchema.PriceID,
	ExampleDBSchema.Currency1,
	ExampleDBSchema.Currency2,
	ExampleDBSchema.Currency3,
}

// Update updates Example fields by primary key
// nolint: dupl
func (o *Example) Update(db *gorm.DB, fields ...ExampleDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"price_id":  o.PriceID,
		"currency1": o.Currency1,
		"currency2": o.Currency2,
		"currency3": o.Currency3,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Example %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ExampleUpdater is an Example updates manager
type ExampleUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewExampleUpdater creates new Example updater
// nolint: dupl
func NewExampleUpdater(db *gorm.DB) ExampleUpdater {
	return ExampleUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Example{}),
	}
}

// ===== END of Example modifiers

// ===== END of all query sets
